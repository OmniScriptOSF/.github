name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION_MATRIX: '["18.x", "20.x", "22.x"]'
  PRIMARY_NODE_VERSION: '20.x'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Type checking
        run: |
          cd omniscript-core
          pnpm run typecheck

      - name: Lint check
        run: |
          cd omniscript-core
          pnpm run lint:check

      - name: Format check
        run: |
          cd omniscript-core
          pnpm run format:check

  # Job 2: Build and Test on Multiple Platforms
  test:
    name: Test (Node ${{ matrix.node-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          cd omniscript-core
          pnpm run build

      - name: Run tests
        run: |
          cd omniscript-core
          pnpm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            omniscript-core/coverage/
            omniscript-core/**/*.log

  # Job 3: Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          cd omniscript-core
          pnpm run build

      - name: Run tests with coverage
        run: |
          cd omniscript-core
          pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./omniscript-core/coverage/coverage-final.json
          flags: unittests
          name: omniscript-core
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: omniscript-core/coverage/

  # Job 4: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          cd omniscript-core
          pnpm audit --audit-level=moderate || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  # Job 5: Converters Build and Test
  converters:
    name: Test Converters
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Chromium for Puppeteer
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      - name: Install dependencies (core)
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Install dependencies (converters)
        run: |
          cd omniscript-converters
          pnpm install --frozen-lockfile

      - name: Build converters
        run: |
          cd omniscript-converters
          pnpm run build

      - name: Run converter tests
        run: |
          cd omniscript-converters
          pnpm test || echo "Converter tests not yet implemented"

  # Job 6: Build Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Build documentation
        run: |
          echo "Documentation build will be implemented in omniscript-site"
          echo "Current version: $(cat omniscript-core/package.json | grep version | head -1 | cut -d'"' -f4)"

  # Job 7: Create Release (only on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, coverage, security, converters]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          cd omniscript-core
          pnpm run build

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f omniscript-core/CHANGELOG.md ]; then
            CHANGELOG=$(sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" omniscript-core/CHANGELOG.md | sed '$d')
          else
            CHANGELOG="Release ${{ steps.version.outputs.version }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            omniscript-core/parser/dist/**/*
            omniscript-core/cli/dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 8: Publish to NPM (only on tags, manual approval)
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: npm-production
      url: https://www.npmjs.com/package/omniscript-cli

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: |
          cd omniscript-core
          pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          cd omniscript-core
          pnpm run build

      - name: Publish omniscript-parser
        run: |
          cd omniscript-core/parser
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish omniscript-cli
        run: |
          cd omniscript-core/cli
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish omniscript-converters
        run: |
          cd omniscript-converters
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 9: Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, security, converters, docs]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Converters: ${{ needs.converters.result }}"
          echo "Docs: ${{ needs.docs.result }}"

      - name: Fail if critical jobs failed
        if: |
          needs.quality.result == 'failure' ||
          needs.test.result == 'failure'
        run: exit 1
